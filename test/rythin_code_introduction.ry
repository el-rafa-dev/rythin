;; -> semicolons para comentarios

;; sistema de importação
using lib_name; -> using será o termo para importar um arquivo externo com semicolon no fim para indicar o fim da acação de importação
using lib_name from sys; -> indica que vc quer importar o arquivo .ry (RythinLang) dos ficheiros do sistema ou sjea, usar uma lib por exemplo, que ja vem com os ficheiros da linguagem
from lib_name get VARIAVEL_DEFINIDA; -> aqui o from indica que voce quer obter o valor de uma variavel do arquivo lib_name. pode se obter strings, chars, inteiros, longos e booeleans

;; sistema de definições
def valor_teste1:int = 99; -> aqui voce definiu uma variavel de tipo inteiro com valor de 99
def valor_teste2:bool = true; -> aqui voce definiu uma variavel de tipo boolean com valor setado para verdadeiro (true)
def valor_teste3:str = "Hi Brazil"; -> aqui voce definiu uma variavel de tipo string com valor Hi World com dois sublihamentos
def valor_teste4:lint = 1234567890; -> aqui voce definiu uma variavel de tipo long com valor de 1234567890. o nome desse tipo de variavel na minha lang sera LINT ou "long int" abreviada
def soma:int (a:int, b:int) -> a + b; -> aqui voce definiu uma função inline para soma da int a e b


;;ponteiros
def *valor:int = valor_teste1; -> aqui voce definiu a variavel valor como um ponteiro que indica o endereço da variavel valor_teste1 na memoria

;;escrever no console

print(&valor); -> aqui vc definiu o print, que irá escrever uma mensagem no console com o endereço do inteiro definido com o nome de valor que está na memoria
print($valor); -> aqui vc definiu o print que ira escrever o valor contido na variavel de noome valor que está na memoria 
printnl("Hi There!"); -> aqui vc definiu o print que ira escrever o texto "Hi There!" e em seguida, ira deixar uma nova linha.
print("Hello World"); -> aqui voce ira printar um hello world no console
printe("Somtethings goes wrong!") -> aqui voce irá printar um erro no console que sairá com cor vermelha no console
printel("Hello World!") -> aqui voce ira printar um erro porem internamente. esse erro não sera vista ao user final e sim em um console de logs
print("Hello\nWorld"); -> aqui definimos um print que no meio do texto há um \n que indica que precisa criar uma nova linha. sendo assim, a saida deverá ser igual a "Hello
                                                                                                                                                                      World"
printl("Hello World Dev!"); -> Aqui vc ira printar uma mensagem simples. porem, no mesmo console de logs do printe

;;condicoes

if valor_teste1 !== 0 -> [                      -> aqui voce definiu um if para checar se valor_teste1 é igual a zero... porem o !== é para caso o valor_teste1 não for igual a \ero printar a mensagem. já o but é ao contrario de !==, ele é tipo o "mas e se valor_teste1 for igual a zero?" então ai voce printa a outra mensagem
    print("valor_teste1 não é igual a zero");
] but [
    print("valor_teste1 é igual a 0. Como??");
] 

if valor_teste1 !== 0 -> [
    print("não é igual");
] but valor_teste1 == 0 [       -> outro if porem nesse o but checa se o valor_teste1 é igual a 0 explicitamente 
    print("é igual");
]


;;loops
loop (true) -> [
    def pos:int = 1;
    print("position %pos");         -> aqui um loop foi definido, enquanto o loop ser verdadeiro ele não irá parar, so pode ser parado com stop
    stop;
]

loop (true) -> [
    if (1+1 !== 2) [                  -> nese loop usamos o continue; para continuar caso 1+1 não seja 2, do contrario ira parar;
        continue;
    ] but [
        stop;
    ]
]

;; arquivos
def finalpath:charseq = "/home/user/file.txt";

fwrite(finalpath, "writed with RythinLang!"); -> aqui voce setou um destido (finalpath) para a criação de um arquivo de nome file.txt com o conteudo escrito "writed with RythinLang!" e depois, leu o arquivo dentro de uma string e printou essa string no console
mkdir("/home/user/test");                       -> aqui voce usou a funcão mkdir (str) para criar uma pasta no destino entre parenteses
def file_txt:str = null;
file_txt = fread(finalpath);
print(file_txt);

;;modularização

def int_teste:int (a:int, b:int) -> [
    return a + b;
]
                                                            -> aqui definimos uma funcão e uma int, a funcção ira apenas printar um texto no console enquanto a int ira somar a + b e retornar o resultado
def void_test:void (a:str, b:int) -> [
    print(a + b);
]

;;leitura de entrada de console

def input_text:str = input("");                            -> aqui definimos uma string que obtera a entrada do console. o input está com as aspas vazias, o que significa que a str input_text recebera apenas a entrada e printar-la no console quando o user der enter
printnl("saida: " + input_text);

def input_text2:str = input("How are you today?  ");       -> aqui definimos uma string que obtera a entrada do console e ainda no console terá a mensagem "How are you today?". Enquanto não haver interação do usuario com o console "ex: clicar enter ou CTRL + C", ele ficara esperando essa interação
printnl("Saida 2: " + input_text2);

def input_text3 = input("Yes or not?  ", 10000);
printnl("Saida 3: " + input_text3);                         -> aqui definimos uma string que obtera a entrada do console e ainda no console estara a mensagem... nesse imput vemos o numero 10000 ou 10s, que é o tempo limite de espera para essa interação. depois disso a espera encerrá sozinha


;;tratamento de exceções
try -> [
    def a:int = 5;
    def b:int = 0
    def c:int a/b;
    printnl(c);                                             -> aqui definimos um tratamento de exceção para uma divisão de intigers que contem os valores de 5 e 0 e tenta dividir 5 por zero. obviamente ira dar erro então esse erro ira pra string e do bloco catch e sera printado no log via printl
] catch (e:str) [
    printl("Error output: " e);
]


;;arrays
def lista_numeros:int[] = [1, 2, 3, 4, 5];      ;; array de inteiros
print(lista_numeros[2]);                        ;; imprime o terceiro valor (índice 2 = 3)

lista_numeros[0] = 99;                          ;; altera o primeiro valor para 99
print(lista_numeros[0]);                        ;; imprime 99

def palavras:str[] = ["oi", "tudo", "bem?"];    ;; array de strings
print(palavras[1]);

def tamanho:int = len(lista_numeros);           ;; retorna o tamanho do array
def existe:bool = has(lista_numeros, 3);        ;; retorna true se 3 estiver no array

def matriz:int[2][3] = [[1,2,3], [4,5,6]];
print(matriz[1][2]); ;; imprime 6


;;alloção e liberação de memoria

def *point:int = alloc(int);
def *other_point:char = alloc(char, 256) -> aqui definimos um ponteiro com 256bytes de memoria alocada
&point = 30;                                    -> aqui definimos um ponteiro int e alocamos memoria para esse ponteiro, adicionamos 30 como valor para esse ponteiro e printamos no console. Em seguida usamos flush para liberação da memoria alocada

print($point);
flush(point);

